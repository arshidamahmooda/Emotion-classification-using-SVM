# -*- coding: utf-8 -*-
"""SVC predictive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZD0p88EFWs6EFLhreYSkRp5UlukNe1uS
"""

import pandas as pd
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC

file_path=r"/content/emotions.csv"
df=pd.read_csv(file_path)
df.head()

import pandas as pd
from sklearn.svm import SVC
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler,LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
# %%
file_path=r"/content/emotions.csv"
df=pd.read_csv(file_path)
df.head()
# %%
x=df['text']
y=df['label']
# Check for missing values in 'label' column and handle them
print(df['label'].isnull().sum()) # Prints the number of missing values

# Option 1: Drop rows with missing values
df = df.dropna(subset=['label'])

# Option 2: Fill missing values with a specific value (e.g., 'unknown')
# df['label'] = df['label'].fillna('unknown')

# After handling missing values, reassign x and y
x=df['text']
y=df['label']
# %%
vectorizer= TfidfVectorizer()
x=vectorizer.fit_transform(x)
# %%
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
# %%
clf=LinearSVC()
clf.fit(x_train,y_train)

y_pred=clf.predict(x_test)
print(classification_report(y_test,y_pred))